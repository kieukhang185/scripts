When you need to embed secrets—whether it’s an application password or a GPG key for apt—the golden rule is never hard-code them into your source files. Instead, use dedicated secret-management patterns and let your tooling inject the real values at runtime. Below are two common scenarios with example code.

1. Application passwords / API keys in code
a. Environment variables + “.env” file
Create a .env (ignored by Git)

dotenv
Copy
Edit
# .env
DB_PASSWORD=supersecret123
API_KEY=AKIA…XYZ
In your code, read from the environment:

Node.js (using dotenv):

js
Copy
Edit
// index.js
require('dotenv').config();
const dbPassword = process.env.DB_PASSWORD;
const apiKey    = process.env.API_KEY;
Python:

python
Copy
Edit
# app.py
import os
db_password = os.getenv("DB_PASSWORD")
api_key     = os.getenv("API_KEY")
At deployment time, set DB_PASSWORD and API_KEY in your server/CI environment instead of committing them.

b. Dedicated secrets manager
– HashiCorp Vault, AWS Secrets Manager, Azure Key Vault, or GCP Secret Manager let you centrally store, rotate and audit secrets.
– Your application authenticates (often via a short-lived token or IAM role) and pulls the secret at startup or on demand.
– Example (Python + AWS Secrets Manager):

python
Copy
Edit
import boto3
import json

client = boto3.client("secretsmanager", region_name="us-east-1")
resp = client.get_secret_value(SecretId="my/db-creds")
secret = json.loads(resp["SecretString"])
db_user = secret["username"]
db_pass = secret["password"]
2. Managing apt repository GPG keys
Debian/Ubuntu has deprecated the old apt-key add approach. Instead:

Fetch and dearmor the key into /usr/share/keyrings/

bash
Copy
Edit
curl -fsSL https://download.example.com/key.gpg \
  | gpg --dearmor \
        --output /usr/share/keyrings/example-archive-keyring.gpg
Reference it in your source list with signed-by:

bash
Copy
Edit
echo \
  "deb [signed-by=/usr/share/keyrings/example-archive-keyring.gpg] \
   https://download.example.com/ubuntu stable main" \
  | tee /etc/apt/sources.list.d/example.list
apt update
Why? This keeps your system’s global keyring clean and ties the key only to that repo.

You can store the .gpg file in a configuration repository (if it’s public), but if it’s private you might pull it from a secure artifact store or secret-managed bucket at build/deploy time.

3. CI/CD integration
Whatever secret-management style you choose, your pipelines should:

Never echo secret values in logs.

Use masked variables (e.g. GitHub Actions secrets, GitLab CI variables).

Fetch repository GPG keys via secure HTTP(S) endpoints or secret-manager-backed artifacts, not via plain HTTP.

Quick checklist
 Don’t commit passwords/API keys in code.

 Do use environment variables or a vault.

 Don’t use apt-key add; use gpg --dearmor + signed-by.

 Do inject secrets at deploy time (CI/CD secrets, instance metadata IAM roles).

 Rotate your keys periodically and audit usage.

By cleanly separating secret storage from application/configuration code, you reduce the blast radius of a leaked repo or container image—and make it easy to rotate and audit keys/passwords across environments.